<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script>
    <link href="style.css" type="text/css" rel="stylesheet">
    <title>Home-Bank Ledger</title>
  </head>
  <body class="main-contents">
    <%- include('partials/nav');%>
    <main class="main-content">
        <h1>Yong & Yi - Bank Ledger</h1>
        <table class="table table-striped" style="width: 90%;">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Category</th>
                    <th>Received In</th>
                    <th>Transfer Out</th>
                    <th>Balance Left</th>
                </tr>
            </thead>
            <tbody>
                <% let balance = 0; %>
              
                <% const combinedRows = [
                  ...totalSalesPaymentbreakdown.map(row => ({ Date: row.Date, Category: 'Sales Payment Breakdown', Debit: row.Amount, Credit: '' })),
                  ...totalPurchasePaymentbreakdown.map(row => ({ Date: row.Date, Category: 'Purchase Payment Breakdown', Debit: '', Credit: row.Amount })),
                  ...topupBalance.map(row => ({ Date: row.date, Category: 'Top Up (Gdex)', Debit: '', Credit: row.amount })),
                  ...totalExpenses.map(row => ({ Date: row.Date, Category: 'Expenses', Debit: '', Credit: row.Amount })),
                  ...totalExpensesPaymentbreakdown.map(row => ({ Date: row.Date, Category: 'Expenses Payment Breakdown', Debit: '', Credit: row.Amount })),
                  ...refund.map(row => ({ Date: row.date, Category: 'Refund', Debit: row.fromSupplier === 'yes' ? row.amount : '', Credit: row.refund2buyer === 'yes' ? row.amount : '' })),
                  ...totalDrawing.map(row => ({ Date: row.Date, Category: 'Drawing', Debit: row.amount, Credit: '' })),
                  ...totalDeposit.map(row => ({ Date: row.date, Category: 'Deposit', Debit: '', Credit: row.amount })),
                  ...totalCapital.map(row => ({ Date: row.date, Category: 'Capital', Debit: row.amount, Credit: '' })),
                  ...totalCreditor.map(row => ({ Date: row.Date, Category: 'Other Creditor', Debit: row.Amount, Credit: '' })),
                  ...totalCreditorpaymentbreak.map(row => ({ Date: row.date, Category: 'Other Creditor Paymentbreakdown', Debit: '', Credit: 'row.amount' })),
                  ...totalDebtorpaymentbreak.map(row => ({ Date: row.date, Category: 'Other Debtor Paymentbreakdown', Debit: row.amount, Credit: '' })),
                  ...totalDebtor.map(row => ({ Date: row.date, Category: 'Other Debtor', Debit: '', Credit: 'row.Amount' }))
                ];
              
                const sortedRows = combinedRows.sort((a, b) => new Date(a.Date) - new Date(b.Date));
                %>
              
                <% sortedRows.forEach(row => { %>
                  <% if (row.Date) { %>
                    <tr>
                      <td><%= new Date(row.Date).toLocaleDateString('en-GB') %></td>
                      <td><%= row.Category %></td>
                      <td><%= row.Debit || '' %></td>
                      <td><%= row.Credit || '' %></td>
                      <% if (row.Debit) { %>
                        <% balance += row.Debit; %>
                      <% } else if (row.Credit) { %>
                        <% balance -= row.Credit; %>
                      <% } %>
                      <td><%= balance.toFixed(2) %></td>
                    </tr>
                  <% } %>
                <% }); %>
            </tbody>
        </table>
    </main>
  </body>
</html>

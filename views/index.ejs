<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <title>Home-Dashboard</title>
    <style>
      main {
          padding-left: 280px;
          position: relative;
      }

      .chart-grid {
          display: grid;
          grid-template-columns: repeat(2, 1fr);
          gap: 20px;
          padding: 20px;
      }

      .chart-container {
          width: 100%;
          max-width: 600px;
          margin: auto;
          height: 400px;
      }
      
      h1 {
          padding-top: 100px;
      }
      
      .table-container {
          display: flex;
          flex-wrap: wrap;
          gap: 20px;
          width: 100%;
          max-height: calc(65vh - 90px);
          overflow: auto;
      }
      @media (max-width: 480px) {
        main {
            padding-left: 10px;
            position: relative;
        }
      }
  </style>
</head>
<body>
    <%- include('partials/nav'); %>
    <main class="main-content">
        <div><h1>Dashboard</h1></div>

        <div class="container">
            <h2>Inventory Dashboard</h2>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Product Name</th>
                        <th>Total Purchased</th>
                        <th>Total Sold</th>
                        <th>Stock Left</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (stockData && stockData.length > 0) { %>
                        <% stockData.forEach(function(product) { %>
                            <tr>
                                <td><%= product.product_name %></td>
                                <td><%= product.total_purchased %></td>
                                <td><%= product.total_sold %></td>
                                <td><%= product.stock_left %></td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="4">No data available.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>

        <div class="container">
            <h2>Restocking Alerts</h2>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Avg. 7 Days Sales Quantity</th>
                        <th>Current Stock</th>
                        <th>Days of Stock Left</th>
                        <th>Restock Alert</th>
                    </tr>
                </thead>
                <tbody id="restockingTable">
                    <!-- Rows will be appended here by JavaScript -->
                </tbody>
            </table>
        </div>
        <div class="container">
          <h2>Sales Data</h2>
          <select id="salesInterval" class="form-select" aria-label="Select Sales Interval">
              <option value="daily">Daily</option>
              <option value="monthly">Monthly</option>
              <option value="yearly">Yearly</option>
          </select>
          <div class="chart-container">
              <canvas id="salesChart"></canvas>
          </div>
        </div>
        
        <div class="container">
            <h2>Current Stock Value</h2>
            <div class="chart-container">
                <canvas id="stockChart"></canvas>
            </div>
        </div>
      
        <script>
          document.addEventListener("DOMContentLoaded", () => {
            fetch('/api/restocking-alerts')
              .then(response => response.json())
              .then(data => {
                console.log("Restocking Data:", data); // Debug to check data
                const tableBody = document.getElementById('restockingTable');
                
                if (data.length === 0) {
                  const row = document.createElement('tr');
                  row.innerHTML = `<td colspan="5">No restocking alerts available</td>`;
                  tableBody.appendChild(row);
                } else {
                  data.forEach(item => {
                    const row = document.createElement('tr');
                    const daysOfStockLeft = item.days_of_stock_left !== null ? item.days_of_stock_left.toFixed(2) : 'Unknown';
                    const restockAlert = item.days_of_stock_left === null ? '<span class="text-success">No Restock Needed</span>' : (item.days_of_stock_left < 7 ? '<span class="text-danger">Restock Needed</span>' : '<span class="text-success">Sufficient Stock</span>');
        
                    row.innerHTML = `
                      <td>${item.product_name}</td>
                      <td>${item.avg_7_days_quantity.toFixed(2)}</td>
                      <td>${item.current_stock}</td>
                      <td>${daysOfStockLeft}</td>
                      <td>${restockAlert}</td>
                    `;
                    tableBody.appendChild(row);
                  });
                }
              })
              .catch(error => {
                console.error('Error fetching restocking alerts:', error);
                const tableBody = document.getElementById('restockingTable');
                const row = document.createElement('tr');
                row.innerHTML = `<td colspan="5" class="text-danger">Error fetching restocking alerts. Please try again later.</td>`;
                tableBody.appendChild(row);
              });
          });
        </script>
        <script>
document.addEventListener("DOMContentLoaded", () => {
    // Sales Chart
    const salesCtx = document.getElementById('salesChart').getContext('2d');
    let salesChart;

    const loadSalesData = (interval) => {
        fetch(`/api/sales-data?interval=${interval}`)
            .then(response => response.json())
            .then(data => {
                console.log('Sales Data:', data);

                if (salesChart) {
                    salesChart.destroy(); // Destroy previous chart instance
                }

                const labels = data.map(item => item.date);
                const sales = data.map(item => item.total_sales);

                salesChart = new Chart(salesCtx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: `Total Sales (${interval})`,
                            data: sales,
                            fill: false,
                            borderColor: 'rgb(75, 192, 192)',
                            tension: 0.1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Date'
                                }
                            },
                            y: {
                                title: {
                                    display: true,
                                    text: 'Total Sales'
                                }
                            }
                        }
                    }
                });
            })
            .catch(error => {
                console.error('Error fetching sales data:', error);
            });
    };

    // Initially load daily sales data
    loadSalesData('daily');

    // Update chart when dropdown selection changes
    document.getElementById('salesInterval').addEventListener('change', (event) => {
        const selectedInterval = event.target.value;
        loadSalesData(selectedInterval);
    });

    // Current Stock Value Chart
    const stockCtx = document.getElementById('stockChart').getContext('2d');

    fetch('/api/current-stock-value')
        .then(response => response.json())
        .then(data => {
            console.log('Stock Value Data:', data);

            const labels = data.map(item => item.product);
            const stockValues = data.map(item => item.current_stock_value);

            new Chart(stockCtx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Current Stock Value',
                        data: stockValues,
                        backgroundColor: 'rgba(54, 162, 235, 0.6)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Product'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Value in Currency'
                            }
                        }
                    }
                }
            });
        })
        .catch(error => {
            console.error('Error fetching stock value data:', error);
        });
});
        </script>

    </main>
</body>
</html>
